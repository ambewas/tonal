"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[472],{9524:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});var c=s(7624),a=s(2172);const t={title:"Scales",sidebar_position:6},l=void 0,r={id:"scales",title:"Scales",description:"tonal",source:"@site/docs/scales.md",sourceDirName:".",slug:"/scales",permalink:"/tonal/docs/scales",draft:!1,unlisted:!1,editUrl:"https://github.com/tonaljs/tonal/tree/main/site/docs/docs/scales.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Scales",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Chords",permalink:"/tonal/docs/chords"},next:{title:"Keys",permalink:"/tonal/docs/keys"}},i={},d=[{value:"Scale props",id:"scale-props",level:2},{value:"<code>Scale.get</code>",id:"scaleget",level:3},{value:"<code>get(name: string): Scale</code>",id:"getname-string-scale",level:4},{value:"Scale notes",id:"scale-notes",level:2},{value:"<code>Scale.degrees</code>",id:"scaledegrees",level:3},{value:"<code>degrees(scaleName: string) =&gt; (degree: number) =&gt; string</code>",id:"degreesscalename-string--degree-number--string",level:4},{value:"<code>Scale.steps</code>",id:"scalesteps",level:3},{value:"<code>steps(scaleName: string) =&gt; (degree: number) =&gt; string</code>",id:"stepsscalename-string--degree-number--string",level:4},{value:"<code>Scale.scaleNotes</code>",id:"scalescalenotes",level:3},{value:"<code>scaleNotes(notes: string[]) =&gt; string[]</code>",id:"scalenotesnotes-string--string",level:4},{value:"<code>Scale.rangeOf</code>",id:"scalerangeof",level:3},{value:"<code>rangeOf(scaleName: string) =&gt; (from: string, to: string) =&gt; string[]</code>",id:"rangeofscalename-string--from-string-to-string--string",level:4},{value:"Finding scales",id:"finding-scales",level:2},{value:"<code>Scale.names</code>",id:"scalenames",level:3},{value:"<code>names(): string[]</code>",id:"names-string",level:4},{value:"<code>Scale.detect</code>",id:"scaledetect",level:3},{value:"<code>detect(notes: string[], options: { tonic?: string, match?: &quot;fit&quot; | &quot;exact&quot; }) =&gt; string[]</code>",id:"detectnotes-string-options--tonic-string-match-fit--exact---string",level:4},{value:"Relationships",id:"relationships",level:2},{value:"<code>Scale.scaleChords</code>",id:"scalescalechords",level:3},{value:"<code>scaleChords(scale: string) =&gt; string[]</code>",id:"scalechordsscale-string--string",level:4},{value:"<code>Scale.extended</code>",id:"scaleextended",level:3},{value:"<code>Scale.extended(scale: string) =&gt; string[]</code>",id:"scaleextendedscale-string--string",level:4},{value:"<code>Scale.reduced</code>",id:"scalereduced",level:3},{value:"<code>reduced(scale: string) =&gt; string[]</code>",id:"reducedscale-string--string",level:4},{value:"<code>Scale.modes</code>",id:"scalemodes",level:3},{value:"<code>modes(name: string) =&gt; string[][]</code>",id:"modesname-string--string",level:4}];function o(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",...(0,a.M)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://www.npmjs.com/browse/keyword/tonal",children:(0,c.jsx)(n.img,{src:"https://img.shields.io/badge/@tonaljs-scale-yellow.svg?style=flat-square",alt:"tonal"})}),"\n",(0,c.jsx)(n.a,{href:"https://www.npmjs.com/package/@tonaljs/scale",children:(0,c.jsx)(n.img,{src:"https://img.shields.io/npm/v/@tonaljs/scale.svg?style=flat-square",alt:"npm version"})})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'import { Scale } from "tonal";\n'})}),"\n",(0,c.jsx)(n.h2,{id:"scale-props",children:"Scale props"}),"\n",(0,c.jsx)(n.h3,{id:"scaleget",children:(0,c.jsx)(n.code,{children:"Scale.get"})}),"\n",(0,c.jsx)(n.h4,{id:"getname-string-scale",children:(0,c.jsx)(n.code,{children:"get(name: string): Scale"})}),"\n",(0,c.jsxs)(n.p,{children:["Get a scale from a scale name. ",(0,c.jsx)(n.code,{children:"Scale.get"})," accepts tonics in the scale name and returns a ",(0,c.jsx)(n.a,{href:"collections/scale-types",children:"scale type"})," with two more properties: ",(0,c.jsx)(n.code,{children:"tonic"})," and ",(0,c.jsx)(n.code,{children:"notes"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'Scale.get("c5 pentatonic");\n// =>\n// {\n//   empty: false,\n//   name: "C5 pentatonic",\n//   type: "major pentatonic",\n//   tonic: "C5",\n//   notes: ["C5", "D5", "E5", "G5", "A5"],\n//   intervals: ["1P", "2M", "3M", "5P", "6M"],\n//   aliases: ["pentatonic"],\n//   setNum: 2708,\n//   chroma: "101010010100",\n//   normalized: "101010010100"\n// }\n'})}),"\n",(0,c.jsx)(n.h2,{id:"scale-notes",children:"Scale notes"}),"\n",(0,c.jsx)(n.h3,{id:"scaledegrees",children:(0,c.jsx)(n.code,{children:"Scale.degrees"})}),"\n",(0,c.jsx)(n.h4,{id:"degreesscalename-string--degree-number--string",children:(0,c.jsx)(n.code,{children:"degrees(scaleName: string) => (degree: number) => string"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Scale.degrees"})," returns a function to get a note name from a scale degree:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const c4major = Scale.degrees("C4 major");\nc4major(1); // => "C4"\nc4major(2); // => "D4"\nc4major(8); // => "C5"\nc4major(-1); // => "B3"\nc4major(-3); // => "A3"\nc4major(-7); // => "C2"\n'})}),"\n",(0,c.jsx)(n.p,{children:"Bear in mind that degree numbers starts with 1 and 0 returns an empty string:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'c4major(0); // => ""\n'})}),"\n",(0,c.jsxs)(n.p,{children:["Because it returns a function, it's handy to be used with ",(0,c.jsx)(n.code,{children:"map"})," (and similar functions):"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'[1, 2, 3].map(Scale.degrees("C major")) => ["C", "D", "E"]\n[1, 2, 3].map(Scale.degrees("C4 major")) => ["C4", "D4", "E4"]\n[-1, -2, -3].map(Scale.degrees("C major")) => ["B", "A", "G"]\n'})}),"\n",(0,c.jsxs)(n.p,{children:["Notice that it uses octaves if the scale tonic has an octave or pitch classes (",(0,c.jsx)(n.em,{children:"octaveless"})," notes) otherwise."]}),"\n",(0,c.jsxs)(n.p,{children:["See ",(0,c.jsx)(n.a,{href:"https://github.com/tonaljs/tonal/tree/main/packages/chord#chorddegreeschordname-string--degree-number--string",children:(0,c.jsx)(n.code,{children:"Chord.degrees"})})]}),"\n",(0,c.jsxs)(n.p,{children:["See ",(0,c.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Degree_(music)",children:"https://en.wikipedia.org/wiki/Degree_(music)"})]}),"\n",(0,c.jsx)(n.h3,{id:"scalesteps",children:(0,c.jsx)(n.code,{children:"Scale.steps"})}),"\n",(0,c.jsx)(n.h4,{id:"stepsscalename-string--degree-number--string",children:(0,c.jsx)(n.code,{children:"steps(scaleName: string) => (degree: number) => string"})}),"\n",(0,c.jsxs)(n.p,{children:["Same as ",(0,c.jsx)(n.code,{children:"Scale.degree"})," but 0 is tonic. It plays better with ranges:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'import { Range, Scale } from "tonal";\n\nRange.numeric([-3, 3]).map(Scale.steps("C4 major"));\n// => ["G3", "A3", "B3", "C4", "D4", "E4", "F4"]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"scalescalenotes",children:(0,c.jsx)(n.code,{children:"Scale.scaleNotes"})}),"\n",(0,c.jsx)(n.h4,{id:"scalenotesnotes-string--string",children:(0,c.jsx)(n.code,{children:"scaleNotes(notes: string[]) => string[]"})}),"\n",(0,c.jsx)(n.p,{children:"Given an array of notes, return an array of sorted note names starting from the first note name of the input array."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'// Always start with the first note of the input array\nScale.scaleNotes(["D4", "c#5", "A5", "F#6"]); // => ["D", "F#", "A", "C#"]\n// Remove duplicates\nScale.scaleNotes(["C4", "c3", "C5", "C4", "c4"]); // => ["C"]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"scalerangeof",children:(0,c.jsx)(n.code,{children:"Scale.rangeOf"})}),"\n",(0,c.jsx)(n.h4,{id:"rangeofscalename-string--from-string-to-string--string",children:(0,c.jsx)(n.code,{children:"rangeOf(scaleName: string) => (from: string, to: string) => string[]"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Scale.rangeOf"})," returns a function to create scale ranges:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const range = Scale.rangeOf("C pentatonic");\nrange("C4", "C5"); // => ["C4", "D4", "E4", "G4", "A4", "C5"]\n'})}),"\n",(0,c.jsxs)(n.p,{children:["Please note that the scale name ",(0,c.jsx)(n.em,{children:"must"})," have tonic:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const range = Scale.rangeOf("pentatonic");\nrange("C4", "C5"); // => []\n'})}),"\n",(0,c.jsx)(n.p,{children:"This function also works with a collection of notes:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const range = Scale.rangeOf("C", "Db", "G");\nrange("C4", "C5"); // => ["C4", "Db4", "G4", "C5"]\n'})}),"\n",(0,c.jsx)(n.h2,{id:"finding-scales",children:"Finding scales"}),"\n",(0,c.jsx)(n.h3,{id:"scalenames",children:(0,c.jsx)(n.code,{children:"Scale.names"})}),"\n",(0,c.jsx)(n.h4,{id:"names-string",children:(0,c.jsx)(n.code,{children:"names(): string[]"})}),"\n",(0,c.jsxs)(n.p,{children:["List all known scale names. Same as ",(0,c.jsx)(n.code,{children:"ScaleType.names()"})]}),"\n",(0,c.jsxs)(n.p,{children:["See ",(0,c.jsx)(n.a,{href:"collections/scale-types",children:"scale-type"})]}),"\n",(0,c.jsx)(n.h3,{id:"scaledetect",children:(0,c.jsx)(n.code,{children:"Scale.detect"})}),"\n",(0,c.jsx)(n.h4,{id:"detectnotes-string-options--tonic-string-match-fit--exact---string",children:(0,c.jsx)(n.code,{children:'detect(notes: string[], options: { tonic?: string, match?: "fit" | "exact" }) => string[]'})}),"\n",(0,c.jsx)(n.p,{children:"Find all scales that first a collection of notes with a given tonic:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'Scale.detect(["C", "D", "E", "F", "G", "A", "B"]);\n// => ["C major", "C bebop", "C bebop major",\n//     "C ichikosucho",  "C chromatic"];\n'})}),"\n",(0,c.jsx)(n.p,{children:"You can pass an optional tonic (otherwise first note will be used):"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'Scale.detect(["C", "D", "E", "F", "G", "A", "B"], { tonic: "A" });\n// => [ \'A aeolian\', \'A minor bebop\', \'A chromatic\' ]\n'})}),"\n",(0,c.jsx)(n.p,{children:"You can ask just the exact match:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'Scale.detect(["D", "E", "F#", "A", "B"], { match: "exact" });\n// => ["D major pentatonic"]\nScale.detect(["D", "E", "F#", "A", "B"], { match: "exact", tonic: "B" });\n// => ["B major pentatonic"]\n'})}),"\n",(0,c.jsx)(n.h2,{id:"relationships",children:"Relationships"}),"\n",(0,c.jsx)(n.h3,{id:"scalescalechords",children:(0,c.jsx)(n.code,{children:"Scale.scaleChords"})}),"\n",(0,c.jsx)(n.h4,{id:"scalechordsscale-string--string",children:(0,c.jsx)(n.code,{children:"scaleChords(scale: string) => string[]"})}),"\n",(0,c.jsx)(n.p,{children:"Get all chords that fits a given scale:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'Scale.scaleChords("pentatonic");\n// => ["5", "64", "M", "M6", "Madd9", "Msus2"]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"scaleextended",children:(0,c.jsx)(n.code,{children:"Scale.extended"})}),"\n",(0,c.jsx)(n.h4,{id:"scaleextendedscale-string--string",children:(0,c.jsx)(n.code,{children:"Scale.extended(scale: string) => string[]"})}),"\n",(0,c.jsx)(n.p,{children:"Get all scales names that has the same notes and at least one more:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'Scale.extended("major");\n// => ["bebop", "bebop dominant", "bebop major", "chromatic", "ichikosucho"]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"scalereduced",children:(0,c.jsx)(n.code,{children:"Scale.reduced"})}),"\n",(0,c.jsx)(n.h4,{id:"reducedscale-string--string",children:(0,c.jsx)(n.code,{children:"reduced(scale: string) => string[]"})}),"\n",(0,c.jsx)(n.p,{children:"Find all scales names that are a subset of the given one (less notes but all from the given scale)"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'Scale.reduced("major");\n// => ["ionian pentatonic", "major pentatonic", "ritusen"]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"scalemodes",children:(0,c.jsx)(n.code,{children:"Scale.modes"})}),"\n",(0,c.jsx)(n.h4,{id:"modesname-string--string",children:(0,c.jsx)(n.code,{children:"modes(name: string) => string[][]"})}),"\n",(0,c.jsx)(n.p,{children:"Find mode names (if any) of a given scale:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'Scale.modeNames("C pentatonic"); // => [\n//    ["C", "major pentatonic"],\n//    ["D", "egyptian"],\n//    ["E", "malkos raga"],\n//    ["G", "ritusen"],\n//    ["A", "minor pentatonic"]\n//  ]\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(o,{...e})}):o(e)}},2172:(e,n,s)=>{s.d(n,{I:()=>r,M:()=>l});var c=s(1504);const a={},t=c.createContext(a);function l(e){const n=c.useContext(t);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),c.createElement(t.Provider,{value:n},e.children)}}}]);