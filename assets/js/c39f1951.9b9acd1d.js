"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[112],{2584:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var o=t(7624),d=t(2172);const l={title:"Chord dictionary",sidebar_position:1},r=void 0,s={id:"collections/chord-types",title:"Chord dictionary",description:"@tonaljs/chord-type",source:"@site/docs/collections/chord-types.md",sourceDirName:"collections",slug:"/collections/chord-types",permalink:"/tonal/docs/collections/chord-types",draft:!1,unlisted:!1,editUrl:"https://github.com/tonaljs/tonal/tree/main/site/docs/docs/collections/chord-types.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Chord dictionary",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Dictionaries and Collections"},next:{title:"Scale dictionary",permalink:"/tonal/docs/collections/scale-types"}},i={},c=[{value:"Usage",id:"usage",level:2},{value:"API",id:"api",level:2},{value:"<code>ChordType.get</code>",id:"chordtypeget",level:3},{value:"<code>get(name: string) =&gt; object</code>",id:"getname-string--object",level:4},{value:"<code>ChordType.names</code>",id:"chordtypenames",level:3},{value:"<code>names() =&gt; string[]</code>",id:"names--string",level:4},{value:"<code>ChordType.symbols</code>",id:"chordtypesymbols",level:3},{value:"<code>symbols() =&gt; string[]</code>",id:"symbols--string",level:4},{value:"<code>ChordType.all</code>",id:"chordtypeall",level:3},{value:"<code>all() =&gt; object[]</code>",id:"all--object",level:4},{value:"<code>ChordType.add</code>",id:"chordtypeadd",level:3},{value:"<code>add(intervals: string[], names: string[], fullName?: string) =&gt; ChordType</code>",id:"addintervals-string-names-string-fullname-string--chordtype",level:4},{value:"How to...",id:"how-to",level:2},{value:"How to get triad chord names?",id:"how-to-get-triad-chord-names",level:3},{value:"How to add a chord type to the dictionary?",id:"how-to-add-a-chord-type-to-the-dictionary",level:3}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"@tonaljs/chord-type"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/@tonaljs-chord_type-yellow.svg?style=flat-square",alt:"tonal"}),"\n",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@tonaljs/chord-type",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/npm/v/@tonaljs/chord-type.svg?style=flat-square",alt:"npm version"})})]}),"\n",(0,o.jsx)(n.p,{children:"A dictionary of musical chords."}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.p,{children:"ES6:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { ChordType } from "tonal";\n'})}),"\n",(0,o.jsx)(n.p,{children:"node:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const { ChordType } = require("tonal");\n'})}),"\n",(0,o.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,o.jsx)(n.h3,{id:"chordtypeget",children:(0,o.jsx)(n.code,{children:"ChordType.get"})}),"\n",(0,o.jsx)(n.h4,{id:"getname-string--object",children:(0,o.jsx)(n.code,{children:"get(name: string) => object"})}),"\n",(0,o.jsx)(n.p,{children:"Given a chord type name, return an object with the following properties:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"name: the chord type name"}),"\n",(0,o.jsx)(n.li,{children:"aliases: a list of alternative names"}),"\n",(0,o.jsx)(n.li,{children:"quality: Major | Minor | Augmented | Diminished | Unknown"}),"\n",(0,o.jsx)(n.li,{children:"num: the pcset number"}),"\n",(0,o.jsx)(n.li,{children:"chroma: the pcset chroma"}),"\n",(0,o.jsx)(n.li,{children:"length: the number of notes"}),"\n",(0,o.jsx)(n.li,{children:"intervals: the interval list"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'ChordType.get("major"); // =>\n// {\n//   name: "major",\n//   aliases: ["M", ""],\n//   quality: "Major",\n//   intervals: ["1P", "3M", "5P"],\n//   num: 2192,\n//   chroma: "100010010000",\n//   length: 3\n// });\n'})}),"\n",(0,o.jsx)(n.h3,{id:"chordtypenames",children:(0,o.jsx)(n.code,{children:"ChordType.names"})}),"\n",(0,o.jsx)(n.h4,{id:"names--string",children:(0,o.jsx)(n.code,{children:"names() => string[]"})}),"\n",(0,o.jsx)(n.p,{children:"List all chord type (long) names in the dictionary"}),"\n",(0,o.jsx)(n.h3,{id:"chordtypesymbols",children:(0,o.jsx)(n.code,{children:"ChordType.symbols"})}),"\n",(0,o.jsx)(n.h4,{id:"symbols--string",children:(0,o.jsx)(n.code,{children:"symbols() => string[]"})}),"\n",(0,o.jsx)(n.p,{children:"List all chord type (long) names in the dictionary"}),"\n",(0,o.jsx)(n.h3,{id:"chordtypeall",children:(0,o.jsx)(n.code,{children:"ChordType.all"})}),"\n",(0,o.jsx)(n.h4,{id:"all--object",children:(0,o.jsx)(n.code,{children:"all() => object[]"})}),"\n",(0,o.jsx)(n.p,{children:"Return a list of all available chord types."}),"\n",(0,o.jsx)(n.h3,{id:"chordtypeadd",children:(0,o.jsx)(n.code,{children:"ChordType.add"})}),"\n",(0,o.jsx)(n.h4,{id:"addintervals-string-names-string-fullname-string--chordtype",children:(0,o.jsx)(n.code,{children:"add(intervals: string[], names: string[], fullName?: string) => ChordType"})}),"\n",(0,o.jsx)(n.p,{children:"Add a chord type to dictionary:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'add(["1P", "3M", "5P"], ["M"], "mayor");\n'})}),"\n",(0,o.jsx)(n.h2,{id:"how-to",children:"How to..."}),"\n",(0,o.jsx)(n.h3,{id:"how-to-get-triad-chord-names",children:"How to get triad chord names?"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"ChordType.all()\n  .filter((get) => get.length === 3)\n  .map((get) => get.name);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"how-to-add-a-chord-type-to-the-dictionary",children:"How to add a chord type to the dictionary?"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'ChordType.add(["1P", "3M", "5P"], ["M", "may"], "mayor");\nChordType.get("mayor"); // => { name: \'mayor\', quality: "Major", chroma: ... }\nChordType.get("may"); // => { name: \'mayor\', quality: "Major", chroma: ... }\n'})})]})}function h(e={}){const{wrapper:n}={...(0,d.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>s,M:()=>r});var o=t(1504);const d={},l=o.createContext(d);function r(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);